// Import necessary dependencies from Redux Toolkit and the related card module.
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { DbCard } from './card';

// Define the interface for the state of the AddCard feature.
interface AddCardState {
  errStr: string;              // Holds the error string associated with card addition.

  dbCards: DbCard[];           // Stores the array of database cards.

  cardName: string;            // Stores the name of the card.
  expiryDate: string;          // Stores the expiry date of the card.
  cardIssuer: string;          // Stores the issuer of the card.
  cardType: string;            // Stores the type of the card.
  cardIssuerOpen: boolean;     // Keeps track of whether card issuer selection is open.
  cardTypeOpen: boolean;       // Keeps track of whether card type selection is open.
}

// Define the initial state for the AddCard feature.
const initialState: AddCardState = {
  errStr: '',                   // Initialize the error string as empty.

  dbCards: [],                  // Initialize the array of database cards as empty.

  cardName: '',                 // Initialize the card name as empty.
  expiryDate: '',               // Initialize the expiry date as empty.
  cardIssuer: '',               // Initialize the card issuer as empty.
  cardType: '',                 // Initialize the card type as empty.
  cardIssuerOpen: false,        // Initialize card issuer selection as closed.
  cardTypeOpen: false,          // Initialize card type selection as closed.
};

// Create a Redux slice for the AddCard feature.
export const addCardSlice = createSlice({
  name: 'addCard',              // Specify the slice name.
  initialState,                 // Provide the initial state.
  reducers: {
    setErrStr: (state, action: PayloadAction<string>) => {
      state.errStr = action.payload;     // Update the error string with the provided payload.
    },
    setDbCards: (state, action: PayloadAction<DbCard[]>) => {
      state.dbCards = action.payload;    // Update the database cards array with the provided payload.
    },

    setCardName: (state, action: PayloadAction<string>) => {
      state.cardName = action.payload;   // Update the card name with the provided payload.
    },
    setExpDate: (state, action: PayloadAction<string>) => {
      state.expiryDate = action.payload; // Update the expiry date with the provided payload.
    },
    setCardIssuer: (state, action: PayloadAction<string>) => {
      state.cardIssuer = action.payload; // Update the card issuer with the provided payload.
    },
    setCardType: (state, action: PayloadAction<string>) => {
      state.cardType = action.payload;   // Update the card type with the provided payload.
    },
    setCardIssuerOpen: (state, action: PayloadAction<boolean>) => {
      state.cardIssuerOpen = action.payload; // Update the card issuer selection status with the provided payload.
    },
    setCardTypeOpen: (state, action: PayloadAction<boolean>) => {
      state.cardTypeOpen = action.payload;   // Update the card type selection status with the provided payload.
    },
    setInitialState: () => initialState     // Reset the state to the initial state.
  },
});

// Export the action creators generated by the slice.
export const {
  setErrStr,

  setDbCards,

  setCardName,
  setExpDate,
  setCardIssuer,
  setCardType,
  setCardIssuerOpen,
  setCardTypeOpen,
  setInitialState
} = addCardSlice.actions;

// Export the reducer function from the slice to be used in the Redux store.
export default addCardSlice.reducer;